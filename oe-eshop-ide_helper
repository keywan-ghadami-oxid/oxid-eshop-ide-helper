#!/usr/bin/env php
<?php
/**
 * This file is part of OXID eSales IDE code completion helper script.
 *
 * OXID eSales IDE code completion helper script is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * OXID eSales IDE code completion helper script is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with OXID eSales IDE code completion helper script. If not, see <http://www.gnu.org/licenses/>.
 *
 * @link      http://www.oxid-esales.com
 * @copyright (C) OXID eSales AG 2003-2016
 */

define('INSTALLATION_ROOT_PATH', dirname(dirname(dirname(dirname(__FILE__)))));
define('VENDOR_PATH', INSTALLATION_ROOT_PATH . DIRECTORY_SEPARATOR . 'vendor' . DIRECTORY_SEPARATOR);
define('OX_BASE_PATH', INSTALLATION_ROOT_PATH . DIRECTORY_SEPARATOR . 'source' . DIRECTORY_SEPARATOR);

//Where CORE_AUTOLOADER_PATH points depends in if the shop is installed as compilation or not.
if (!is_dir(OX_BASE_PATH . 'Core')) {
    //we need this in case of compilation installation
    define('CORE_AUTOLOADER_PATH', VENDOR_PATH . 'oxid-esales' . DIRECTORY_SEPARATOR . 'oxideshop-ce' . DIRECTORY_SEPARATOR .
        'source' . DIRECTORY_SEPARATOR . 'Core' . DIRECTORY_SEPARATOR . 'Autoload' . DIRECTORY_SEPARATOR);
} else {
    define('CORE_AUTOLOADER_PATH', OX_BASE_PATH . 'Core' . DIRECTORY_SEPARATOR . 'Autoload' . DIRECTORY_SEPARATOR );
}

require_once VENDOR_PATH . 'autoload.php';
require_once CORE_AUTOLOADER_PATH . 'AliasAutoload.php';

// TODO remove this line after auto loading via composer works
require_once 'src/Generator.php';

$generator = new OxidEsales\EshopIdeHelper\Generator(INSTALLATION_ROOT_PATH);
try {
    $generator->generate();
} catch (\Exception $exception) {
    print $exception->getTraceAsString();
}
